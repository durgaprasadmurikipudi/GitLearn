There are 2 Source Control Systems:
Centralised and Decentralised.
Centralised, require a connection to central server for all the soruce control operations to be performed.
Decentralised: does allow all operations to be performed on local. And the n whenever you can connect to
server, you can sync all these things.

Key concepts:
Repository: IT contails all original files of the project that we want to backup and also the history of
changes that we did to the project.
3 Stages of GIT:
Working area: Where we work on the changes to be made to the project.
Staging area: Place where we queue up all of our changes that are part of
 the next commit without affect git change history.
Repository/Commit/History: Once commited all our changes, these become a permanent member of the
change part of the repository. Technically these all stored in the .git folder in the same Place
as of working area.
MAster Branch: This is the main branch where all the original project and all the commited changed
to the original repository reside. This is a default one created by GIT when we first opt it 
for version controlling by GIT.

Setting up GIT:
We need to configure our name and email address in GIT, before we can commit any to local repository.

git config --global user.name "durga prasad"
git config --global user.email "durgaprasadmurikipudi@gmail.com"

To see what we have configured, we can use below command:

git config --global --list

Git clone command creates a branch 'master' here in local and also adds a direct reference to origin/master in the remote repository
that we are trying to clone.

If there exists a local repository and you want to add a remote repository to this local one, you can issue below command..
git remote add <the_Remote_branch_name> <the_Remote_repository_url>


So as we already discussed, there are 3 stages to the GIT, one the working directory, staging area, commited stage.
Now by defaul t when we initiate a git repository, all files in the folder are not tracked, we can track a file/folder by
issuing command git add <file_name/folder_name>

Now, when we make any changes to the file that git is tracking, we can then issue git add command again, to move it to staging area.
If a new file is introcued into the project, then by default git doesn't track it, issue git add again then again,
its all changes will be added to staging area and is also curently under tracking.

To add a default code eitor for git, we can use
git config --core.editor "code"

There are 3 ways to create git repositories:
1. No source code yet.
2. There exists a local source code.
3. Cloning a GitHub repository or any online repository.

In both 1 and 2 options:.. you issue git init command and if you want to add a remote repository, you do a git remote add <remote_branch_name> <remote_url>
In 3rd option.. You can clone some one else repository or your own repository.
You can actually fork in github, some one else repository and it will be copied into ypur own account.
Now you have a exact copy of that repository.
You can clone that repository in local and then, that repository will be copied to your local.
A default master 'branch' is created which points to original repository code in the local.
The remote repository main branch is called origin and there exists an inherent connection to this origin branch in the remote
repository from the local git store.

Now, whenver changes are made in the local reposiory, we can push those changes by git push origin master, and those will be 
published to remote repository.

But the best practice is always to pull the chanegs first from remote repository to your local, so that any changes whover commited to that remote 
reposiory will be written down to your local.
There are 2 avantages by this, you can see if there are any conflicts with remote repository and second one is,
after pull, your changes are simple insertions, in the remote repository.

After you push, the changes to the remote repository it also lists the starting commit point to ending commit point in your local repository
that has been published to remote repository.

WE can see the git settings .gitconfig file as well.

The git files that are being tracked are also called as files that are added to git index.
ALso, we can combine both commit and add in single comand by, 
git commit -am "commit_message".

This will add all changes in files that are being tracked to staging area and then staging area to commit stage.

Allright, back to basics..
So if you just add changes to some tracked files, then they will be shown as files that are waiting to be staged,
with issue of git add, they are moved to staging area.
Only those changes present in git staging area are moved to commited stage, when git commit is issued.
So if you want to commit changes you definitely have to move tha changes to staging area, or else
issue a git commit -am, in the sense, stage and commit as well.
Even for a same file you did a change 1, then staged it, now you did a 'change2' to that file but not staged it yet.
A commit will move only 'change1' to the commited zone.
So git well know the changes that are in working area, and that are in staged area.

Mention a folder for git add and it will recursively add all the subfolders and subfiles present in it.

Git reset:
If you want to unstage a file or folder, then you issue the following command.
git reset HEAD <file-name/folder-name>
Saying essentially the current branch be reset or get rid of any staged changes of that particular file or folder.

If after unstaging you still want to get rid of all the changes present in that file in that working directory,
you cna basically issue a checkout command.
git checkout -- <file-name>
Thats it the file is downloaded from the commited area and is clean now.
Discards all changes or essentially replaces that version of file present in commited area.

Moving files:
Git mv level1.txt level-1.txt
renames level1.txt file to level-1.txt

Moving whether in linux or git, into smae folder renames it essentially.
If you manually rename it, git thinks you deleted a file and new file has been added.
This new file is untracked as expected.
You can fix this by git add -A
And the GIT index automatically updates to reflex the working tree index and discovers that files has been renamed (magicaly!).
or you can 
git add the new file and issue command
git add -u
this also makes git rediscover that files has been renamed.
You can also move one folder to another folder, git doesnt have any issue with that. It discovers it correctly.

Deleting files:

Git rm <file-name>

simply deletes the file from the index and as well as working tree.
if you reset it, 
git reset head hipster.txt
hipster.txt is again tracked, but will not be coming backed to working tree.
For that,
git checkout -- hipster.txt, after reset command.

If you manually remove the file,
rm hipster.txt
git detects that file is detected,
to stage this changes, or to add/incorporate these changes,
git add -A.
Same for directory removal.


If you add a new file, git will show a file has been newly added and currently not being tracked.
If you delete that file, git ignores whatever, becuase it is never tracked.

Git log:
Git log command shows the log of commits that entered the master branch.
By the way, git help log shows the list of options that are available for the log command and also the usage.
By git log, you can search as specific commit by mentioning its commit number.
By --since flag, you can actually mention a date range.
You can also specifically check for changes/ commits applied to a specific file.
For ex:
git logg -- GIT\ Notes.txt
Shows all the commmits that involved 'GIT Notes.txt'.
Here by mentioning -- you are seperating them from other options and also implying that check in that following path as
of how files in the first place came into git tracking.
Or you can use --follow flag to check beyond the file renames or file creations, that is to check the changes involved beyond
renames to file existing in a particular path.
ex: 
git log --follow \level\level2\level2.txt
This follow command only works for single file.

To show a one line for each commit hostory, you can type in
git log --all --oneline --decorate --graph

You can alias the above big command by the following
git config --global alias.hist "log --all --graph --decorate --oneline"

WE mentioned --global flag to make this alias command work regardless of the repository.
Any config that starts with alias. is recognised as an alias command.
This is stored in the .gitconfig file.
now to run the alias command, just type
git hist. and you are done.

GIT IGNORE:
we can ignore specific files, so that GIT just ignores them and doesnt bug us that there exists some files that are not being tracked.
To do so, we have to create a .gitignore file, 
the rules to enter in this .gitignore file are one expression per line.
There are 3 general expressions:
specific file: just mention the full file name,
File pattern: *.txt etc..
Folder: my-folder/

Git Diffing:
Git diff tool shows you the differences between working area vs staging area vs HEAD(Commited region).
git diff : simply compares between working area and staged area
git diff HEAD : compares between working area and HEAD
git diff --staged HEAD: compares between staged vs HEAD.

if you use diff tool, left side is always the highest area of commit.
so if working vs staged, then staged is in the left side
and if staged vs HEA, HEAD will be in the left side of comaprision.

You can always limit comaprision to one file by
git diff -- README.md 

Diffing between commits,
git diff HEAD HEAD^: compares between last commit and last commit - 1.
git diff <some_random_commit_no#> HEAD:
compares between last commit and the random commit mentioned.
git diff <Random_commit1> <random_commit2>
comapres between 2 different commits.

To comapre between remote and local ?
git diff master origin/master.






