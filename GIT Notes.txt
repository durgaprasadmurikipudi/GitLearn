There are 2 Source Control Systems:
Centralised and Decentralised.
Centralised, require a connection to central server for all the soruce control operations to be performed.
Decentralised: does allow all operations to be performed on local. And the n whenever you can connect to
server, you can sync all these things.

Key concepts:
Repository: IT contails all original files of the project that we want to backup and also the history of
changes that we did to the project.
3 Stages of GIT:
Working area: Where we work on the changes to be made to the project.
Staging area: Place where we queue up all of our changes that are part of
 the next commit without affect git change history.
Repository/Commit/History: Once commited all our changes, these become a permanent member of the
change part of the repository. Technically these all stored in the .git folder in the same Place
as of working area.
MAster Branch: This is the main branch where all the original project and all the commited changed
to the original repository reside. This is a default one created by GIT when we first opt it 
for version controlling by GIT.

Setting up GIT:
We need to configure our name and email address in GIT, before we can commit any to local repository.

git config --global user.name "durga prasad"
git config --global user.email "durgaprasadmurikipudi@gmail.com"

To see what we have configured, we can use below command:

git config --global --list

Git clone command creates a branch 'master' here in local and also adds a direct reference to origin/master in the remote repository
that we are trying to clone.

If there exists a local repository and you want to add a remote repository to this local one, you can issue below command..
git remote add <the_Remote_branch_name> <the_Remote_repository_url>


So as we already discussed, there are 3 stages to the GIT, one the working directory, staging area, commited stage.
Now by defaul t when we initiate a git repository, all files in the folder are not tracked, we can track a file/folder by
issuing command git add <file_name/folder_name>

Now, when we make any changes to the file that git is tracking, we can then issue git add command again, to move it to staging area.
If a new file is introcued into the project, then by default git doesn't track it, issue git add again then again,
its all changes will be added to staging area and is also curently under tracking.

To add a default code eitor for git, we can use
git config --core.editor "code"

There are 3 ways to create git repositories:
1. No source code yet.
2. There exists a local source code.
3. Cloning a GitHub repository or any online repository.

In both 1 and 2 options:.. you issue git init command and if you want to add a remote repository, you do a git remote add <remote_branch_name> <remote_url>
In 3rd option.. You can clone some one else repository or your own repository.
You can actually fork in github, some one else repository and it will be copied into ypur own account.
Now you have a exact copy of that repository.
You can clone that repository in local and then, that repository will be copied to your local.
A default master 'branch' is created which points to original repository code in the local.
The remote repository main branch is called origin and there exists an inherent connection to this origin branch in the remote
repository from the local git store.

Now, whenver changes are made in the local reposiory, we can push those changes by git push origin master, and those will be 
published to remote repository.

But the best practice is always to pull the chanegs first from remote repository to your local, so that any changes whover commited to that remote 
reposiory will be written down to your local.
There are 2 avantages by this, you can see if there are any conflicts with remote repository and second one is,
after pull, your changes are simple insertions, in the remote repository.

After you push, the changes to the remote repository it also lists the starting commit point to ending commit point in your local repository
that has been published to remote repository.

WE can see the git settings .gitconfig file as well.

The git files that are being tracked are also called as files that are added to git index.
ALso, we can combine both commit and add in single comand by, 
git commit -am "commit_message".

This will add all changes in files that are being tracked to staging area and then staging area to commit stage.

Allright, back to basics..
So if you just add changes to some tracked files, then they will be shown as files that are waiting to be staged,
with issue of git add, they are moved to staging area.
Only those changes present in git staging area are moved to commited stage, when git commit is issued.
So if you want to commit changes you definitely have to move tha changes to staging area, or else
issue a git commit -am, in the sense, stage and commit as well.
Even for a same file you did a change 1, then staged it, now you did a 'change2' to that file but not staged it yet.
A commit will move only 'change1' to the commited zone.
So git well know the changes that are in working area, and that are in staged area.

Mention a folder for git add and it will recursively add all the subfolders and subfiles present in it.

Git reset:
If you want to unstage a file or folder, then you issue the following command.
git reset HEAD <file-name/folder-name>
Saying essentially the current branch be reset or get rid of any staged changes of that particular file or folder.

If after unstaging you still want to get rid of all the changes present in that file in that working directory,
you cna basically issue a checkout command.
git checkout -- <file-name>
Thats it the file is downloaded from the commited area and is clean now.
Discards all changes or essentially replaces that version of file present in commited area.

Moving files:
Git mv level1.txt level-1.txt
renames level1.txt file to level-1.txt

Moving whether in linux or git, into smae folder renames it essentially.
If you manually rename it, git thinks you deleted a file and new file has been added.
This new file is untracked as expected.
You can fix this by git add -A
And the GIT index automatically updates to reflex the working tree index and discovers that files has been renamed (magicaly!).
or you can 
git add the new file and issue command
git add -u
this also makes git rediscover that files has been renamed.
You can also move one folder to another folder, git doesnt have any issue with that. It discovers it correctly.

Deleting files:

Git rm <file-name>

simply deletes the file from the index and as well as working tree.
if you reset it, 
git reset head hipster.txt
hipster.txt is again tracked, but will not be coming backed to working tree.
For that,
git checkout -- hipster.txt, after reset command.

If you manually remove the file,
rm hipster.txt
git detects that file is detected,
to stage this changes, or to add/incorporate these changes,
git add -A.
Same for directory removal.


If you add a new file, git will show a file has been newly added and currently not being tracked.
If you delete that file, git ignores whatever, becuase it is never tracked.

Git log:
Git log command shows the log of commits that entered the master branch.
By the way, git help log shows the list of options that are available for the log command and also the usage.
By git log, you can search as specific commit by mentioning its commit number.
By --since flag, you can actually mention a date range.
You can also specifically check for changes/ commits applied to a specific file.
For ex:
git logg -- GIT\ Notes.txt
Shows all the commmits that involved 'GIT Notes.txt'.
Here by mentioning -- you are seperating them from other options and also implying that check in that following path as
of how files in the first place came into git tracking.
Or you can use --follow flag to check beyond the file renames or file creations, that is to check the changes involved beyond
renames to file existing in a particular path.
ex: 
git log --follow \level\level2\level2.txt
This follow command only works for single file.

To show a one line for each commit hostory, you can type in
git log --all --oneline --decorate --graph

You can alias the above big command by the following
git config --global alias.hist "log --all --graph --decorate --oneline"

WE mentioned --global flag to make this alias command work regardless of the repository.
Any config that starts with alias. is recognised as an alias command.
This is stored in the .gitconfig file.
now to run the alias command, just type
git hist. and you are done.

GIT IGNORE:
we can ignore specific files, so that GIT just ignores them and doesnt bug us that there exists some files that are not being tracked.
To do so, we have to create a .gitignore file, 
the rules to enter in this .gitignore file are one expression per line.
There are 3 general expressions:
specific file: just mention the full file name,
File pattern: *.txt etc..
Folder: my-folder/

Git Diffing:
Git diff tool shows you the differences between working area vs staging area vs HEAD(Commited region).
git diff : simply compares between working area and staged area
git diff HEAD : compares between working area and HEAD
git diff --staged HEAD: compares between staged vs HEAD.

if you use diff tool, left side is always the highest area of commit.
so if working vs staged, then staged is in the left side
and if staged vs HEA, HEAD will be in the left side of comaprision.

You can always limit comaprision to one file by
git diff -- README.md 

Diffing between commits,
git diff HEAD HEAD^: compares between last commit and last commit - 1.
git diff <some_random_commit_no#> HEAD:
compares between last commit and the random commit mentioned.
git diff <Random_commit1> <random_commit2>
comapres between 2 different commits.

To compare between remote and local ?
git diff master origin/master.

Branching:
==========
git branch -a : lists all the branches present, including remote branch names.
git branch: just lists the local branches present.
An * mark will be present on the current branch.

If you type git branch mynewbranch,
a branch called 'mynewbranch' will be created on the current repository we sit on.
we can rename it by syntax git branch -m mynewbranch newbranch
and it will be renamed.
To switch to a new branch, we need to check it out.
git checkout newbranch, will shift us to that 'newbranch' branch.

If we see the commit history a this point, for when a branch is created, a new commit point is added.
In this commit point, it will list: HEAD, origin/HEAD, origina/master, newbranch, master.
Why does it list? it is essentially saying that all the above names point to the most recent commit and that are all in sync.
To delete a branch,
git branch -d '<branch-name>'
For obvious reasons you cant delete a branch, that you current are on, you have to switch to a different branch.

git checkout -b '<branch-name', will create a new branch on the current residing branch and also shifts your working tree to
point that newly created branch.

now if we made any change in feature branch, and now we want it to merge it to master,
first we switch to master branch by git checkout master
and then git merge <'whatever-the-branch-you-want-to-commit-name>".

Git says the type of merge after the merge, if there are no conflicts.
If it says its a fast forward merge, then essentially it means that there are no commits present in the master branch,
after you have created the branch, so esentially the commits present in merging branch are treated as if they have directly
made on the master branch.
So just putting the branch ahead of master branch or like that..
It also lists which commti fro master and the commit from brnach are being merged.

Its always a good practice to git diff master '<merging-branch-name>' to see the differences made in the branch before merging.
Also delete the branch name after merging, you dont want it in msot of the cases.
If you see the git log --oneline --graph,
now you will see that HEAD, master are pointing to the latest commit, and just below them remote brnach names will be listed,
essentially saying that local is ahead of remote by one commit.

So if you create a branch from amster and made commits to it, and made some changes to master also, made a commti there,
now.. you can merge branch and master, if you are sure there will be no conflicts. It will merge without a complaint.

Next.. git log -oneline --graph --decorate --all will give you in a beautful way how the branches were created and merged,
do not forget to delete the branch if not needed and laso checking out to master before merging.

This scenario is called automatic merge.

If you have conflicts, then you got to keep the lines that you want to save and commit them.
Then merge again.
You got to save both files as required and then you got to merge.

"Rebasing":
===========
Now you have crated a branch and commited some changes into it.
Also, you have made some changes into master branch.. and commited them.

Now rebase means, you will incorporate all changes to feature branch from master rbanch.
What it does is.. first rewinds all changes made to feature branch, applies all changes made to master branch.
Applies changes of feature branch now on feature branch, this is replaying..
Now rebase is complete.

Now it looks like the feauture branch only has the all changes and looks like all the changes made in master are already 
done before ever when the feature branch has been created.
If you have any conflicts while rebasing, you can abort the entire rebasing via git rebase --abort

If you actually resolve the conflicts, and you want to continue rebasing.. 
git rebase -- continue.

So what happens to this conflicts merge ?
Whatever the conflicts you have resovled will all be incorporated as changes to feature branch, all the changes that are all 
alone and belong to master branch, stay in master.
So after rebase --continue,
all the unconflicted changes in master will be as a commit in master and all the conflicitng changes and all the non conflicting 
changes belonging to feature branch will be present in the feature branch.

You can later merge this branches and it will be a simple fast forward merge.

REbase: remote:
===============
What if you have changes in origin or remote branch and also in your local master branch and you want to rebase that changes
in the local master branch ?
First do a git status 
, it will say master is ahead by one commit,
now do git fetch origin master, now it will non disruptively bring all the commits present in origin.
Now if we say git status, it will say origin and master are both diverged each with one commit respectively.
Now do a git pull --rebase origin master.
Thats all you rebased origin with master.
If you do simple pull, it will be a automatic merge operation.

Stashing:
=========
You have made some changes to the working directory, now you want to urgently work on a production fix in the same branch,
you cant commit these chanegs to the staged area or commit region.
You can do then git stash save or / by default git uses save, so git stash
THen all this work will be saved into a stash save point. And all the changes in the working area will be removed,
it will be clean as if there are no changes.

Now work on prod fix and push them to master and origin branch.
Now git stash apply, it will apply the last stash point saved.
Git stash is like a stack.
so all the stashed save poitns will be saved in stack.
you can see the list by git stash list and also pop or delete the last one by git stash drop.

you can simply do both git stash apply and git stash drop by command
git stash pop.
Also, git stash save by default only changes to tracked files.
If you also want to include untracked files, git staash -u is the command.

Managing multiple stashes:
==========================

If you do multiple stashes,
git stash list: lists them all.
git stash show stash@{index-number}: lists the difference between head commit and stash at that mentioned index number.
git stash apply stash@{index-number}: Applies that changes present in mentioned stash index number.
git stash clear: clears all the stashed

Als you can apply all the changes present in the latest stash by command
git stash branch <branch-name>
also after applying the changes to the branch, that latest stash will be deleted as well.

The git commit --amend command is a convenient way to modify the most recent commit.
 It lets you combine staged changes with the previous commit instead of creating an entirely new commit. 
 It can also be used to simply edit the previous commit message without changing its snapshot.

GIT Tagging:
List of commands and their explanations:
To create a tag in GIT:
git tag myTag
To show the list of tags present:
git tag --list
To show the description of a specific tag: mentions the commit details, author ..etc:
git show myTag
To delete the tag:
git tag --delete myTag

Annotated Tags
Annotated tags are tags with more information, like comments, associated with them.
To create an annotated tag: you mention the -a flag
git tag -a v-1.0
When you ask to show an annotated tag, you also now see the annotated notes along with other details associated.
Comparing Tags:
Tags mark important milestones in a project, so they are great way to compare what has happened between those milestones.

git tag -a v-1.1

git tag v-1.2 -m "Release 1.2", here you are directly adding the message to be associated with this tag.
git tag --list
git log --oneline --decorate --graph --all
git diff v-1.0 v-1.2, this is how you comapre two different tags.
git difftool v-1.0 v-1.2
You can also add a tag to a alrady committed one , by just mentioning the commit number.
If you dont mention a commit number, it will by default associate itself with the commit pointed by head or latest commit.
Updating a Tag
Sometimes mistakes happen and you'll need to update a tag.

git tag -a v-0.8-alpha -f bd35d46, this will update the tag already created, -f flag is what enables update.
Remote Tagging (GitHub):
Working with remote tags on GitHub.
Command Listing

git push origin v-0.9-beta, you can put an individual tag, and the commits till then will be directly pushed to github.
git push origin v-1.1
clear
git push origin master --tags, you can actually push the tags created in master, after the commits have pushed to remote origin
by the above command, this will specifically sync the tags created in master branch with remote branch.
To delete a tag finally :
git push origin :v-0.8-alpha

Git REset:
Git reset HEAD^, resets to one commit below,
so if you have 4 commit points, the above command, goes to 3rd commit point and keeps changes in the 4 commit point
again in staging area.
git reset HEAD^2, makes you go below 2 commit points in commit history.

git reflog shows you all the commits and resets as well.
even a reset is also like a commit point in git, so if you copy the commit code of one reset and 
tell git that current repository to be reset to that commit, you will actually move forward to that commit point.
Thus way, we can actually move forward and backaward in commit history. Ain't it nice .. ?

1
